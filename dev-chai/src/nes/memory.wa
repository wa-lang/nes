type CPUMemory struct {
	console: *Console
}

func NewCPUMemory(console: *Console) => *CPUMemory {
	return &CPUMemory{console}
}

func CPUMemory.Read(address: uint16) => byte {
	switch {
	case address < 0x2000:
		return this.console.RAM[address%0x0800]
	case address < 0x4000:
		return this.console.PPU.readRegister(0x2000 + address%8)
	case address == 0x4014:
		return this.console.PPU.readRegister(address)
	case address == 0x4015:
		return this.console.APU.readRegister(address)
	case address == 0x4016:
		return this.console.Controller1.Read()
	case address == 0x4017:
		return this.console.Controller2.Read()
	case address < 0x6000:

	case address >= 0x6000:
		return this.console.Mapper.Read(address)
	default:
		log_Fatalf("unhandled cpu memory read at address: 0x%04X", address)
	}
	return 0
}

func CPUMemory.Write(address: uint16, value: byte) {
	switch {
	case address < 0x2000:
		this.console.RAM[address%0x0800] = value
	case address < 0x4000:
		this.console.PPU.writeRegister(0x2000+address%8, value)
	case address < 0x4014:
		this.console.APU.writeRegister(address, value)
	case address == 0x4014:
		this.console.PPU.writeRegister(address, value)
	case address == 0x4015:
		this.console.APU.writeRegister(address, value)
	case address == 0x4016:
		this.console.Controller1.Write(value)
		this.console.Controller2.Write(value)
	case address == 0x4017:
		this.console.APU.writeRegister(address, value)
	case address < 0x6000:

	case address >= 0x6000:
		this.console.Mapper.Write(address, value)
	default:
		log_Fatalf("unhandled cpu memory write at address: 0x%04X", address)
	}
}

type PPUMemory struct {
	console: *Console
}

func NewPPUMemory(console: *Console) => *PPUMemory {
	return &PPUMemory{console}
}

func PPUMemory.Read(address: uint16) => byte {
	address = address % 0x4000
	switch {
	case address < 0x2000:
		return this.console.Mapper.Read(address)
	case address < 0x3F00:
		mode := this.console.Cartridge.Mirror
		return this.console.PPU.nameTableData[MirrorAddress(mode, address)%2048]
	case address < 0x4000:
		return this.console.PPU.readPalette(address % 32)
	default:
		log_Fatalf("unhandled ppu memory read at address: 0x%04X", address)
	}
	return 0
}

func PPUMemory.Write(address: uint16, value: byte) {
	address = address % 0x4000
	switch {
	case address < 0x2000:
		this.console.Mapper.Write(address, value)
	case address < 0x3F00:
		mode := this.console.Cartridge.Mirror
		this.console.PPU.nameTableData[MirrorAddress(mode, address)%2048] = value
	case address < 0x4000:
		this.console.PPU.writePalette(address%32, value)
	default:
		log_Fatalf("unhandled ppu memory write at address: 0x%04X", address)
	}
}

const (
	MirrorHorizontal = 0
	MirrorVertical   = 1
	MirrorSingle0    = 2
	MirrorSingle1    = 3
	MirrorFour       = 4
)

global MirrorLookup = [...][4]uint16{
	{0, 0, 1, 1},
	{0, 1, 0, 1},
	{0, 0, 0, 0},
	{1, 1, 1, 1},
	{0, 1, 2, 3},
}

func MirrorAddress(mode: byte, address: uint16) => uint16 {
	address = (address - 0x2000) % 0x1000
	table := address / 0x0400
	offset := address % 0x0400
	return 0x2000 + MirrorLookup[mode][table]*0x0400 + offset
}

