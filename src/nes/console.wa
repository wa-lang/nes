import (
	"image"
)

type Console struct {
	CPU:         *CPU
	APU:         *APU
	PPU:         *PPU
	Cartridge:   *Cartridge
	Controller1: *Controller
	Controller2: *Controller
	Mapper:      Mapper
	RAM:         []byte
}

func NewConsole(name: string, romBytes: []byte) => (*Console, error) {
	cartridge, err := LoadNESFile(romBytes)
	if err != nil {
		return nil, err
	}
	ram := make([]byte, 2048)
	controller1 := NewController()
	controller2 := NewController()
	console := Console{
		nil, nil, nil, cartridge, controller1, controller2, nil, ram}
	mapper, err := NewMapper(&console)
	if err != nil {
		return nil, err
	}
	console.Mapper = mapper
	console.CPU = NewCPU(&console)
	console.APU = NewAPU(&console)
	console.PPU = NewPPU(&console)
	return &console, nil
}

func Console.Reset() {
	this.CPU.Reset()
}

func Console.Step() => int {
	cpuCycles := this.CPU.Step()
	ppuCycles := cpuCycles * 3
	for i := 0; i < ppuCycles; i++ {
		this.PPU.Step()
		this.Mapper.Step()
	}
	for i := 0; i < cpuCycles; i++ {
		this.APU.Step()
	}
	return cpuCycles
}

func Console.StepFrame() => int {
	cpuCycles := 0
	frame := this.PPU.Frame
	for frame == this.PPU.Frame {
		cpuCycles += this.Step()
	}
	return cpuCycles
}

func Console.StepSeconds(seconds: float64) {
	cycles := int(CPUFrequency * seconds)
	for cycles > 0 {
		cycles -= this.Step()
	}
}

func Console.Buffer() => *image.RGBA {
	return this.PPU.front
}

func Console.SetButtons1(buttons: [8]bool) {
	this.Controller1.SetButtons(buttons)
}

func Console.SetButtons2(buttons: [8]bool) {
	this.Controller2.SetButtons(buttons)
}

