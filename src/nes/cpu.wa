const CPUFrequency = 1789773

const (
	_ = iota
	interruptNone
	interruptNMI
	interruptIRQ
)

const (
	_ = iota
	modeAbsolute
	modeAbsoluteX
	modeAbsoluteY
	modeAccumulator
	modeImmediate
	modeImplied
	modeIndexedIndirect
	modeIndirect
	modeIndirectIndexed
	modeRelative
	modeZeroPage
	modeZeroPageX
	modeZeroPageY
)

global instructionModes = [256]byte{
	6, 7, 6, 7, 11, 11, 11, 11, 6, 5, 4, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 12, 12, 6, 3, 6, 3, 2, 2, 2, 2,
	1, 7, 6, 7, 11, 11, 11, 11, 6, 5, 4, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 12, 12, 6, 3, 6, 3, 2, 2, 2, 2,
	6, 7, 6, 7, 11, 11, 11, 11, 6, 5, 4, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 12, 12, 6, 3, 6, 3, 2, 2, 2, 2,
	6, 7, 6, 7, 11, 11, 11, 11, 6, 5, 4, 5, 8, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 12, 12, 6, 3, 6, 3, 2, 2, 2, 2,
	5, 7, 5, 7, 11, 11, 11, 11, 6, 5, 6, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 13, 13, 6, 3, 6, 3, 2, 2, 3, 3,
	5, 7, 5, 7, 11, 11, 11, 11, 6, 5, 6, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 13, 13, 6, 3, 6, 3, 2, 2, 3, 3,
	5, 7, 5, 7, 11, 11, 11, 11, 6, 5, 6, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 12, 12, 6, 3, 6, 3, 2, 2, 2, 2,
	5, 7, 5, 7, 11, 11, 11, 11, 6, 5, 6, 5, 1, 1, 1, 1,
	10, 9, 6, 9, 12, 12, 12, 12, 6, 3, 6, 3, 2, 2, 2, 2,
}

global instructionSizes = [256]byte{
	2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
	3, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
	1, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
	1, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 0, 3, 0, 0,
	2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,
	2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,
}

global instructionCycles = [256]byte{
	7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5,
	2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4,
	2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
	2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,
	2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
}

global instructionPageCycles = [256]byte{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
}

global instructionNames = [256]string{
	"BRK", "ORA", "KIL", "SLO", "NOP", "ORA", "ASL", "SLO",
	"PHP", "ORA", "ASL", "ANC", "NOP", "ORA", "ASL", "SLO",
	"BPL", "ORA", "KIL", "SLO", "NOP", "ORA", "ASL", "SLO",
	"CLC", "ORA", "NOP", "SLO", "NOP", "ORA", "ASL", "SLO",
	"JSR", "AND", "KIL", "RLA", "BIT", "AND", "ROL", "RLA",
	"PLP", "AND", "ROL", "ANC", "BIT", "AND", "ROL", "RLA",
	"BMI", "AND", "KIL", "RLA", "NOP", "AND", "ROL", "RLA",
	"SEC", "AND", "NOP", "RLA", "NOP", "AND", "ROL", "RLA",
	"RTI", "EOR", "KIL", "SRE", "NOP", "EOR", "LSR", "SRE",
	"PHA", "EOR", "LSR", "ALR", "JMP", "EOR", "LSR", "SRE",
	"BVC", "EOR", "KIL", "SRE", "NOP", "EOR", "LSR", "SRE",
	"CLI", "EOR", "NOP", "SRE", "NOP", "EOR", "LSR", "SRE",
	"RTS", "ADC", "KIL", "RRA", "NOP", "ADC", "ROR", "RRA",
	"PLA", "ADC", "ROR", "ARR", "JMP", "ADC", "ROR", "RRA",
	"BVS", "ADC", "KIL", "RRA", "NOP", "ADC", "ROR", "RRA",
	"SEI", "ADC", "NOP", "RRA", "NOP", "ADC", "ROR", "RRA",
	"NOP", "STA", "NOP", "SAX", "STY", "STA", "STX", "SAX",
	"DEY", "NOP", "TXA", "XAA", "STY", "STA", "STX", "SAX",
	"BCC", "STA", "KIL", "AHX", "STY", "STA", "STX", "SAX",
	"TYA", "STA", "TXS", "TAS", "SHY", "STA", "SHX", "AHX",
	"LDY", "LDA", "LDX", "LAX", "LDY", "LDA", "LDX", "LAX",
	"TAY", "LDA", "TAX", "LAX", "LDY", "LDA", "LDX", "LAX",
	"BCS", "LDA", "KIL", "LAX", "LDY", "LDA", "LDX", "LAX",
	"CLV", "LDA", "TSX", "LAS", "LDY", "LDA", "LDX", "LAX",
	"CPY", "CMP", "NOP", "DCP", "CPY", "CMP", "DEC", "DCP",
	"INY", "CMP", "DEX", "AXS", "CPY", "CMP", "DEC", "DCP",
	"BNE", "CMP", "KIL", "DCP", "NOP", "CMP", "DEC", "DCP",
	"CLD", "CMP", "NOP", "DCP", "NOP", "CMP", "DEC", "DCP",
	"CPX", "SBC", "NOP", "ISC", "CPX", "SBC", "INC", "ISC",
	"INX", "SBC", "NOP", "SBC", "CPX", "SBC", "INC", "ISC",
	"BEQ", "SBC", "KIL", "ISC", "NOP", "SBC", "INC", "ISC",
	"SED", "SBC", "NOP", "ISC", "NOP", "SBC", "INC", "ISC",
}

type CPU struct {
	*CPUMemory
	Cycles:    uint64
	PC:        uint16
	SP:        byte
	A:         byte
	X:         byte
	Y:         byte
	C:         byte
	Z:         byte
	I:         byte
	D:         byte
	B:         byte
	U:         byte
	V:         byte
	N:         byte
	interrupt: byte
	stall:     int
	table:     [256]func(*stepInfo)
}

func NewCPU(console: *Console) => *CPU {
	this := &CPU{CPUMemory: NewCPUMemory(console)}
	this.createTable()
	this.Reset()
	return this
}

func CPU.createTable() {
	this.table = [256]func(*stepInfo){
		this.brk, this.ora, this.kil, this.slo, this.nop, this.ora, this.asl, this.slo,
		this.php, this.ora, this.asl, this.anc, this.nop, this.ora, this.asl, this.slo,
		this.bpl, this.ora, this.kil, this.slo, this.nop, this.ora, this.asl, this.slo,
		this.clc, this.ora, this.nop, this.slo, this.nop, this.ora, this.asl, this.slo,
		this.jsr, this.and, this.kil, this.rla, this.bit, this.and, this.rol, this.rla,
		this.plp, this.and, this.rol, this.anc, this.bit, this.and, this.rol, this.rla,
		this.bmi, this.and, this.kil, this.rla, this.nop, this.and, this.rol, this.rla,
		this.sec, this.and, this.nop, this.rla, this.nop, this.and, this.rol, this.rla,
		this.rti, this.eor, this.kil, this.sre, this.nop, this.eor, this.lsr, this.sre,
		this.pha, this.eor, this.lsr, this.alr, this.jmp, this.eor, this.lsr, this.sre,
		this.bvc, this.eor, this.kil, this.sre, this.nop, this.eor, this.lsr, this.sre,
		this.cli, this.eor, this.nop, this.sre, this.nop, this.eor, this.lsr, this.sre,
		this.rts, this.adc, this.kil, this.rra, this.nop, this.adc, this.ror, this.rra,
		this.pla, this.adc, this.ror, this.arr, this.jmp, this.adc, this.ror, this.rra,
		this.bvs, this.adc, this.kil, this.rra, this.nop, this.adc, this.ror, this.rra,
		this.sei, this.adc, this.nop, this.rra, this.nop, this.adc, this.ror, this.rra,
		this.nop, this.sta, this.nop, this.sax, this.sty, this.sta, this.stx, this.sax,
		this.dey, this.nop, this.txa, this.xaa, this.sty, this.sta, this.stx, this.sax,
		this.bcc, this.sta, this.kil, this.ahx, this.sty, this.sta, this.stx, this.sax,
		this.tya, this.sta, this.txs, this.tas, this.shy, this.sta, this.shx, this.ahx,
		this.ldy, this.lda, this.ldx, this.lax, this.ldy, this.lda, this.ldx, this.lax,
		this.tay, this.lda, this.tax, this.lax, this.ldy, this.lda, this.ldx, this.lax,
		this.bcs, this.lda, this.kil, this.lax, this.ldy, this.lda, this.ldx, this.lax,
		this.clv, this.lda, this.tsx, this.las, this.ldy, this.lda, this.ldx, this.lax,
		this.cpy, this.cmp, this.nop, this.dcp, this.cpy, this.cmp, this.dec, this.dcp,
		this.iny, this.cmp, this.dex, this.axs, this.cpy, this.cmp, this.dec, this.dcp,
		this.bne, this.cmp, this.kil, this.dcp, this.nop, this.cmp, this.dec, this.dcp,
		this.cld, this.cmp, this.nop, this.dcp, this.nop, this.cmp, this.dec, this.dcp,
		this.cpx, this.sbc, this.nop, this.isc, this.cpx, this.sbc, this.inc, this.isc,
		this.inx, this.sbc, this.nop, this.sbc, this.cpx, this.sbc, this.inc, this.isc,
		this.beq, this.sbc, this.kil, this.isc, this.nop, this.sbc, this.inc, this.isc,
		this.sed, this.sbc, this.nop, this.isc, this.nop, this.sbc, this.inc, this.isc,
	}
}

func CPU.Reset() {
	this.PC = this.Read16(0xFFFC)
	this.SP = 0xFD
	this.SetFlags(0x24)
}

func pagesDiffer(a, b: uint16) => bool {
	return a&0xFF00 != b&0xFF00
}

func CPU.addBranchCycles(info: *stepInfo) {
	this.Cycles++
	if pagesDiffer(info.pc, info.address) {
		this.Cycles++
	}
}

func CPU.compare(a, b: byte) {
	this.setZN(a - b)
	if a >= b {
		this.C = 1
	} else {
		this.C = 0
	}
}

func CPU.Read16(address: uint16) => uint16 {
	lo := uint16(this.Read(address))
	hi := uint16(this.Read(address + 1))
	return hi<<8 | lo
}

func CPU.read16bug(address: uint16) => uint16 {
	a := address
	b := (a & 0xFF00) | uint16(byte(a)+1)
	lo := this.Read(a)
	hi := this.Read(b)
	return uint16(hi)<<8 | uint16(lo)
}

func CPU.push(value: byte) {
	this.Write(0x100|uint16(this.SP), value)
	this.SP--
}

func CPU.pull() => byte {
	this.SP++
	return this.Read(0x100 | uint16(this.SP))
}

func CPU.push16(value: uint16) {
	hi := byte(value >> 8)
	lo := byte(value & 0xFF)
	this.push(hi)
	this.push(lo)
}

func CPU.pull16() => uint16 {
	lo := uint16(this.pull())
	hi := uint16(this.pull())
	return hi<<8 | lo
}

func CPU.Flags() => byte {
	flags: byte
	flags |= this.C << 0
	flags |= this.Z << 1
	flags |= this.I << 2
	flags |= this.D << 3
	flags |= this.B << 4
	flags |= this.U << 5
	flags |= this.V << 6
	flags |= this.N << 7
	return flags
}

func CPU.SetFlags(flags: byte) {
	this.C = (flags >> 0) & 1
	this.Z = (flags >> 1) & 1
	this.I = (flags >> 2) & 1
	this.D = (flags >> 3) & 1
	this.B = (flags >> 4) & 1
	this.U = (flags >> 5) & 1
	this.V = (flags >> 6) & 1
	this.N = (flags >> 7) & 1
}

func CPU.setZ(value: byte) {
	if value == 0 {
		this.Z = 1
	} else {
		this.Z = 0
	}
}

func CPU.setN(value: byte) {
	if value&0x80 != 0 {
		this.N = 1
	} else {
		this.N = 0
	}
}

func CPU.setZN(value: byte) {
	this.setZ(value)
	this.setN(value)
}

func CPU.triggerNMI() {
	this.interrupt = interruptNMI
}

func CPU.triggerIRQ() {
	if this.I == 0 {
		this.interrupt = interruptIRQ
	}
}

type stepInfo struct {
	address: uint16
	pc:      uint16
	mode:    byte
}

func CPU.Dump() {
	print("{", this.Cycles, this.PC, this.SP, this.A, this.X, this.Y, this.C, this.Z, this.I, this.D, this.B, this.U, this.V, this.N, this.interrupt, this.stall, "}")
	for _, v := range this.CPUMemory.console.RAM {
		print(v)
		print(" ")
	}
	println("")
}

func CPU.Step() => int {
	if this.stall > 0 {
		this.stall--
		return 1
	}

	cycles := this.Cycles

	switch this.interrupt {
	case interruptNMI:
		this.nmi()
	case interruptIRQ:
		this.irq()
	}
	this.interrupt = interruptNone

	opcode := this.Read(this.PC)
	mode := instructionModes[opcode]

	address: uint16
	pageCrossed: bool
	switch mode {
	case modeAbsolute:
		address = this.Read16(this.PC + 1)
	case modeAbsoluteX:
		address = this.Read16(this.PC+1) + uint16(this.X)
		pageCrossed = pagesDiffer(address-uint16(this.X), address)
	case modeAbsoluteY:
		address = this.Read16(this.PC+1) + uint16(this.Y)
		pageCrossed = pagesDiffer(address-uint16(this.Y), address)
	case modeAccumulator:
		address = 0
	case modeImmediate:
		address = this.PC + 1
	case modeImplied:
		address = 0
	case modeIndexedIndirect:
		address = this.read16bug(uint16(this.Read(this.PC+1) + this.X))
	case modeIndirect:
		address = this.read16bug(this.Read16(this.PC + 1))
	case modeIndirectIndexed:
		address = this.read16bug(uint16(this.Read(this.PC+1))) + uint16(this.Y)
		pageCrossed = pagesDiffer(address-uint16(this.Y), address)
	case modeRelative:
		offset := uint16(this.Read(this.PC + 1))
		if offset < 0x80 {
			address = this.PC + 2 + offset
		} else {
			address = this.PC + 2 + offset - 0x100
		}
	case modeZeroPage:
		address = uint16(this.Read(this.PC + 1))
	case modeZeroPageX:
		address = uint16(this.Read(this.PC+1)+this.X) & 0xff
	case modeZeroPageY:
		address = uint16(this.Read(this.PC+1)+this.Y) & 0xff
	}

	this.PC += uint16(instructionSizes[opcode])
	this.Cycles += uint64(instructionCycles[opcode])
	if pageCrossed {
		this.Cycles += uint64(instructionPageCycles[opcode])
	}
	info := &stepInfo{address, this.PC, mode}

	this.table[opcode](info)

	return int(this.Cycles - cycles)
}

func CPU.nmi() {
	this.push16(this.PC)
	this.php(nil)
	this.PC = this.Read16(0xFFFA)
	this.I = 1
	this.Cycles += 7
}

func CPU.irq() {
	this.push16(this.PC)
	this.php(nil)
	this.PC = this.Read16(0xFFFE)
	this.I = 1
	this.Cycles += 7
}

func CPU.adc(info: *stepInfo) {
	a := this.A
	b := this.Read(info.address)
	c := this.C
	this.A = a + b + c
	this.setZN(this.A)
	if int(a)+int(b)+int(c) > 0xFF {
		this.C = 1
	} else {
		this.C = 0
	}
	if (a^b)&0x80 == 0 && (a^this.A)&0x80 != 0 {
		this.V = 1
	} else {
		this.V = 0
	}
}

func CPU.and(info: *stepInfo) {
	this.A = this.A & this.Read(info.address)
	this.setZN(this.A)
}

func CPU.asl(info: *stepInfo) {
	if info.mode == modeAccumulator {
		this.C = (this.A >> 7) & 1
		this.A <<= 1
		this.setZN(this.A)
	} else {
		value := this.Read(info.address)
		this.C = (value >> 7) & 1
		value <<= 1
		this.Write(info.address, value)
		this.setZN(value)
	}
}

func CPU.bcc(info: *stepInfo) {
	if this.C == 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.bcs(info: *stepInfo) {
	if this.C != 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.beq(info: *stepInfo) {
	if this.Z != 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.bit(info: *stepInfo) {
	value := this.Read(info.address)
	this.V = (value >> 6) & 1
	this.setZ(value & this.A)
	this.setN(value)
}

func CPU.bmi(info: *stepInfo) {
	if this.N != 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.bne(info: *stepInfo) {
	if this.Z == 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.bpl(info: *stepInfo) {
	if this.N == 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.brk(info: *stepInfo) {
	this.push16(this.PC)
	this.php(info)
	this.sei(info)
	this.PC = this.Read16(0xFFFE)
}

func CPU.bvc(info: *stepInfo) {
	if this.V == 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.bvs(info: *stepInfo) {
	if this.V != 0 {
		this.PC = info.address
		this.addBranchCycles(info)
	}
}

func CPU.clc(info: *stepInfo) {
	this.C = 0
}

func CPU.cld(info: *stepInfo) {
	this.D = 0
}

func CPU.cli(info: *stepInfo) {
	this.I = 0
}

func CPU.clv(info: *stepInfo) {
	this.V = 0
}

func CPU.cmp(info: *stepInfo) {
	value := this.Read(info.address)
	this.compare(this.A, value)
}

func CPU.cpx(info: *stepInfo) {
	value := this.Read(info.address)
	this.compare(this.X, value)
}

func CPU.cpy(info: *stepInfo) {
	value := this.Read(info.address)
	this.compare(this.Y, value)
}

func CPU.dec(info: *stepInfo) {
	value := this.Read(info.address) - 1
	this.Write(info.address, value)
	this.setZN(value)
}

func CPU.dex(info: *stepInfo) {
	this.X--
	this.setZN(this.X)
}

func CPU.dey(info: *stepInfo) {
	this.Y--
	this.setZN(this.Y)
}

func CPU.eor(info: *stepInfo) {
	this.A = this.A ^ this.Read(info.address)
	this.setZN(this.A)
}

func CPU.inc(info: *stepInfo) {
	value := this.Read(info.address) + 1
	this.Write(info.address, value)
	this.setZN(value)
}

func CPU.inx(info: *stepInfo) {
	this.X++
	this.setZN(this.X)
}

func CPU.iny(info: *stepInfo) {
	this.Y++
	this.setZN(this.Y)
}

func CPU.jmp(info: *stepInfo) {
	this.PC = info.address
}

func CPU.jsr(info: *stepInfo) {
	this.push16(this.PC - 1)
	this.PC = info.address
}

func CPU.lda(info: *stepInfo) {
	this.A = this.Read(info.address)
	this.setZN(this.A)
}

func CPU.ldx(info: *stepInfo) {
	this.X = this.Read(info.address)
	this.setZN(this.X)
}

func CPU.ldy(info: *stepInfo) {
	this.Y = this.Read(info.address)
	this.setZN(this.Y)
}

func CPU.lsr(info: *stepInfo) {
	if info.mode == modeAccumulator {
		this.C = this.A & 1
		this.A >>= 1
		this.setZN(this.A)
	} else {
		value := this.Read(info.address)
		this.C = value & 1
		value >>= 1
		this.Write(info.address, value)
		this.setZN(value)
	}
}

func CPU.nop(info: *stepInfo) {
}

func CPU.ora(info: *stepInfo) {
	this.A = this.A | this.Read(info.address)
	this.setZN(this.A)
}

func CPU.pha(info: *stepInfo) {
	this.push(this.A)
}

func CPU.php(info: *stepInfo) {
	this.push(this.Flags() | 0x10)
}

func CPU.pla(info: *stepInfo) {
	this.A = this.pull()
	this.setZN(this.A)
}

func CPU.plp(info: *stepInfo) {
	this.SetFlags(this.pull()&0xEF | 0x20)
}

func CPU.rol(info: *stepInfo) {
	if info.mode == modeAccumulator {
		c := this.C
		this.C = (this.A >> 7) & 1
		this.A = (this.A << 1) | c
		this.setZN(this.A)
	} else {
		c := this.C
		value := this.Read(info.address)
		this.C = (value >> 7) & 1
		value = (value << 1) | c
		this.Write(info.address, value)
		this.setZN(value)
	}
}

func CPU.ror(info: *stepInfo) {
	if info.mode == modeAccumulator {
		c := this.C
		this.C = this.A & 1
		this.A = (this.A >> 1) | (c << 7)
		this.setZN(this.A)
	} else {
		c := this.C
		value := this.Read(info.address)
		this.C = value & 1
		value = (value >> 1) | (c << 7)
		this.Write(info.address, value)
		this.setZN(value)
	}
}

func CPU.rti(info: *stepInfo) {
	this.SetFlags(this.pull()&0xEF | 0x20)
	this.PC = this.pull16()
}

func CPU.rts(info: *stepInfo) {
	this.PC = this.pull16() + 1
}

func CPU.sbc(info: *stepInfo) {
	a := this.A
	b := this.Read(info.address)
	c := this.C
	this.A = a - b - (1 - c)
	this.setZN(this.A)
	if int(a)-int(b)-int(1-c) >= 0 {
		this.C = 1
	} else {
		this.C = 0
	}
	if (a^b)&0x80 != 0 && (a^this.A)&0x80 != 0 {
		this.V = 1
	} else {
		this.V = 0
	}
}

func CPU.sec(info: *stepInfo) {
	this.C = 1
}

func CPU.sed(info: *stepInfo) {
	this.D = 1
}

func CPU.sei(info: *stepInfo) {
	this.I = 1
}

func CPU.sta(info: *stepInfo) {
	this.Write(info.address, this.A)
}

func CPU.stx(info: *stepInfo) {
	this.Write(info.address, this.X)
}

func CPU.sty(info: *stepInfo) {
	this.Write(info.address, this.Y)
}

func CPU.tax(info: *stepInfo) {
	this.X = this.A
	this.setZN(this.X)
}

func CPU.tay(info: *stepInfo) {
	this.Y = this.A
	this.setZN(this.Y)
}

func CPU.tsx(info: *stepInfo) {
	this.X = this.SP
	this.setZN(this.X)
}

func CPU.txa(info: *stepInfo) {
	this.A = this.X
	this.setZN(this.A)
}

func CPU.txs(info: *stepInfo) {
	this.SP = this.X
}

func CPU.tya(info: *stepInfo) {
	this.A = this.Y
	this.setZN(this.A)
}

func CPU.ahx(info: *stepInfo) {
}

func CPU.alr(info: *stepInfo) {
}

func CPU.anc(info: *stepInfo) {
}

func CPU.arr(info: *stepInfo) {
}

func CPU.axs(info: *stepInfo) {
}

func CPU.dcp(info: *stepInfo) {
}

func CPU.isc(info: *stepInfo) {
}

func CPU.kil(info: *stepInfo) {
}

func CPU.las(info: *stepInfo) {
}

func CPU.lax(info: *stepInfo) {
}

func CPU.rla(info: *stepInfo) {
}

func CPU.rra(info: *stepInfo) {
}

func CPU.sax(info: *stepInfo) {
}

func CPU.shx(info: *stepInfo) {
}

func CPU.shy(info: *stepInfo) {
}

func CPU.slo(info: *stepInfo) {
}

func CPU.sre(info: *stepInfo) {
}

func CPU.tas(info: *stepInfo) {
}

func CPU.xaa(info: *stepInfo) {
}

