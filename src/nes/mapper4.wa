type Mapper4 struct {
	*Cartridge
	console:    *Console
	register:   byte
	registers:  [8]byte
	prgMode:    byte
	chrMode:    byte
	prgOffsets: [4]int
	chrOffsets: [8]int
	reload:     byte
	counter:    byte
	irqEnable:  bool
}

func NewMapper4(console: *Console, cartridge: *Cartridge) => Mapper {
	this := &Mapper4{Cartridge: cartridge, console: console}
	this.prgOffsets[0] = this.prgBankOffset(0)
	this.prgOffsets[1] = this.prgBankOffset(1)
	this.prgOffsets[2] = this.prgBankOffset(-2)
	this.prgOffsets[3] = this.prgBankOffset(-1)
	return this
}

func Mapper4.Step() {
	ppu := this.console.PPU
	if ppu.Cycle != 280 {
		return
	}
	if ppu.ScanLine > 239 && ppu.ScanLine < 261 {
		return
	}
	if ppu.flagShowBackground == 0 && ppu.flagShowSprites == 0 {
		return
	}
	this.HandleScanLine()
}

func Mapper4.HandleScanLine() {
	if this.counter == 0 {
		this.counter = this.reload
	} else {
		this.counter--
		if this.counter == 0 && this.irqEnable {
			this.console.CPU.triggerIRQ()
		}
	}
}

func Mapper4.Read(address: uint16) => byte {
	switch {
	case address < 0x2000:
		bank := address / 0x0400
		offset := address % 0x0400
		return this.CHR[this.chrOffsets[bank]+int(offset)]
	case address >= 0x8000:
		address = address - 0x8000
		bank := address / 0x2000
		offset := address % 0x2000
		return this.PRG[this.prgOffsets[bank]+int(offset)]
	case address >= 0x6000:
		return this.SRAM[int(address)-0x6000]
	default:
		log_Fatalf("unhandled mapper4 read at address: 0x%04X", address)
	}
	return 0
}

func Mapper4.Write(address: uint16, value: byte) {
	switch {
	case address < 0x2000:
		bank := address / 0x0400
		offset := address % 0x0400
		this.CHR[this.chrOffsets[bank]+int(offset)] = value
	case address >= 0x8000:
		this.writeRegister(address, value)
	case address >= 0x6000:
		this.SRAM[int(address)-0x6000] = value
	default:
		log_Fatalf("unhandled mapper4 write at address: 0x%04X", address)
	}
}

func Mapper4.writeRegister(address: uint16, value: byte) {
	switch {
	case address <= 0x9FFF && address%2 == 0:
		this.writeBankSelect(value)
	case address <= 0x9FFF && address%2 == 1:
		this.writeBankData(value)
	case address <= 0xBFFF && address%2 == 0:
		this.writeMirror(value)
	case address <= 0xBFFF && address%2 == 1:
		this.writeProtect(value)
	case address <= 0xDFFF && address%2 == 0:
		this.writeIRQLatch(value)
	case address <= 0xDFFF && address%2 == 1:
		this.writeIRQReload(value)
	case address <= 0xFFFF && address%2 == 0:
		this.writeIRQDisable(value)
	case address <= 0xFFFF && address%2 == 1:
		this.writeIRQEnable(value)
	}
}

func Mapper4.writeBankSelect(value: byte) {
	this.prgMode = (value >> 6) & 1
	this.chrMode = (value >> 7) & 1
	this.register = value & 7
	this.updateOffsets()
}

func Mapper4.writeBankData(value: byte) {
	this.registers[this.register] = value
	this.updateOffsets()
}

func Mapper4.writeMirror(value: byte) {
	switch value & 1 {
	case 0:
		this.Cartridge.Mirror = MirrorVertical
	case 1:
		this.Cartridge.Mirror = MirrorHorizontal
	}
}

func Mapper4.writeProtect(value: byte) {
}

func Mapper4.writeIRQLatch(value: byte) {
	this.reload = value
}

func Mapper4.writeIRQReload(value: byte) {
	this.counter = 0
}

func Mapper4.writeIRQDisable(value: byte) {
	this.irqEnable = false
}

func Mapper4.writeIRQEnable(value: byte) {
	this.irqEnable = true
}

func Mapper4.prgBankOffset(index: int) => int {
	if index >= 0x80 {
		index -= 0x100
	}
	index %= len(this.PRG) / 0x2000
	offset := index * 0x2000
	if offset < 0 {
		offset += len(this.PRG)
	}
	return offset
}

func Mapper4.chrBankOffset(index: int) => int {
	if index >= 0x80 {
		index -= 0x100
	}
	index %= len(this.CHR) / 0x0400
	offset := index * 0x0400
	if offset < 0 {
		offset += len(this.CHR)
	}
	return offset
}

func Mapper4.updateOffsets() {
	switch this.prgMode {
	case 0:
		this.prgOffsets[0] = this.prgBankOffset(int(this.registers[6]))
		this.prgOffsets[1] = this.prgBankOffset(int(this.registers[7]))
		this.prgOffsets[2] = this.prgBankOffset(-2)
		this.prgOffsets[3] = this.prgBankOffset(-1)
	case 1:
		this.prgOffsets[0] = this.prgBankOffset(-2)
		this.prgOffsets[1] = this.prgBankOffset(int(this.registers[7]))
		this.prgOffsets[2] = this.prgBankOffset(int(this.registers[6]))
		this.prgOffsets[3] = this.prgBankOffset(-1)
	}
	switch this.chrMode {
	case 0:
		this.chrOffsets[0] = this.chrBankOffset(int(this.registers[0] & 0xFE))
		this.chrOffsets[1] = this.chrBankOffset(int(this.registers[0] | 0x01))
		this.chrOffsets[2] = this.chrBankOffset(int(this.registers[1] & 0xFE))
		this.chrOffsets[3] = this.chrBankOffset(int(this.registers[1] | 0x01))
		this.chrOffsets[4] = this.chrBankOffset(int(this.registers[2]))
		this.chrOffsets[5] = this.chrBankOffset(int(this.registers[3]))
		this.chrOffsets[6] = this.chrBankOffset(int(this.registers[4]))
		this.chrOffsets[7] = this.chrBankOffset(int(this.registers[5]))
	case 1:
		this.chrOffsets[0] = this.chrBankOffset(int(this.registers[2]))
		this.chrOffsets[1] = this.chrBankOffset(int(this.registers[3]))
		this.chrOffsets[2] = this.chrBankOffset(int(this.registers[4]))
		this.chrOffsets[3] = this.chrBankOffset(int(this.registers[5]))
		this.chrOffsets[4] = this.chrBankOffset(int(this.registers[0] & 0xFE))
		this.chrOffsets[5] = this.chrBankOffset(int(this.registers[0] | 0x01))
		this.chrOffsets[6] = this.chrBankOffset(int(this.registers[1] & 0xFE))
		this.chrOffsets[7] = this.chrBankOffset(int(this.registers[1] | 0x01))
	}
}

